// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using throwcode_back.DB_Context;

namespace throwcode_back.Migrations
{
    [DbContext(typeof(UserContext))]
    [Migration("20201203121638_inmit")]
    partial class inmit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("ProblemUser", b =>
                {
                    b.Property<int>("Solved_ById")
                        .HasColumnType("int");

                    b.Property<int>("Solved_ProblemsId")
                        .HasColumnType("int");

                    b.HasKey("Solved_ById", "Solved_ProblemsId");

                    b.HasIndex("Solved_ProblemsId");

                    b.ToTable("ProblemUser");
                });

            modelBuilder.Entity("throwcode_back.Models.Problem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Solved")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Trying")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Problems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Solved = 0,
                            Title = "Найти сумму двух чисел",
                            Trying = 0,
                            Type = "Easy"
                        },
                        new
                        {
                            Id = 2,
                            Solved = 0,
                            Title = "Найти разницу двух чисел",
                            Trying = 0,
                            Type = "Easy"
                        });
                });

            modelBuilder.Entity("throwcode_back.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@admin.ru",
                            Login = "admin",
                            Password = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Email = "slave@slave.ru",
                            Login = "slave",
                            Password = "slave"
                        });
                });

            modelBuilder.Entity("ProblemUser", b =>
                {
                    b.HasOne("throwcode_back.Models.User", null)
                        .WithMany()
                        .HasForeignKey("Solved_ById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("throwcode_back.Models.Problem", null)
                        .WithMany()
                        .HasForeignKey("Solved_ProblemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("throwcode_back.Models.Problem", b =>
                {
                    b.OwnsOne("throwcode_back.Models.ProblemDescription", "ProblemDescription", b1 =>
                        {
                            b1.Property<int>("ProblemId")
                                .HasColumnType("int");

                            b1.Property<string>("Cheat")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Description")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ExamplesJson")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<string>("InitialCodeJson")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("TestCasesJson")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ProblemId");

                            b1.ToTable("ProblemsDescription");

                            b1.WithOwner("Problem")
                                .HasForeignKey("ProblemId");

                            b1.Navigation("Problem");

                            b1.HasData(
                                new
                                {
                                    ProblemId = 1,
                                    Cheat = "К этой задаче нет подсказок",
                                    Description = "В этой задаче тербуется найти сумму двух чисел",
                                    ExamplesJson = "[{\"input\":\"a = 1, b = 2\",\"output\":\"3\"},{\"input\":\"a = 3, b = 3\",\"output\":\"6\"}]",
                                    Id = 1,
                                    InitialCodeJson = "{\"Javascript\":\"JS Code Here!\",\"Csharp\":\"C# Code Here!\",\"CPlus\":\"C++ Code Here!\"}",
                                    TestCasesJson = "[{\"input\":{\"a\":1,\"b\":2},\"output\":{\"output\":3}},{\"input\":{\"a\":4,\"b\":4},\"output\":{\"output\":8}}]"
                                },
                                new
                                {
                                    ProblemId = 2,
                                    Cheat = "К этой задаче нет подсказок",
                                    Description = "В этой задаче тербуется найти разность двух чисел",
                                    ExamplesJson = "[{\"input\":\"a = 2, b = 1\",\"output\":\"1\"},{\"input\":\"a = 3, b = 3\",\"output\":\"0\"}]",
                                    Id = 2,
                                    InitialCodeJson = "{\"Javascript\":\"JS Code Here!\",\"Csharp\":\"C# Code Here!\",\"CPlus\":\"C++ Code Here!\"}",
                                    TestCasesJson = "[{\"input\":{\"a\":2,\"b\":1},\"output\":{\"output\":1}},{\"input\":{\"a\":4,\"b\":4},\"output\":{\"output\":0}}]"
                                });
                        });

                    b.Navigation("ProblemDescription")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
